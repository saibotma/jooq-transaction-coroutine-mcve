package org.jooq.mcve.test.kotlin.postgres

import kotlinx.coroutines.runBlocking
import org.jooq.DSLContext
import org.jooq.SQLDialect
import org.jooq.impl.DSL
import org.jooq.kotlin.coroutines.transactionCoroutine
import org.jooq.mcve.kotlin.postgres.tables.references.TEST
import org.jooq.tools.JooqLogger
import org.junit.*
import org.junit.Assert.assertEquals
import org.junit.Assert.assertNotNull
import org.testcontainers.containers.PostgreSQLContainer
import org.testcontainers.utility.ResourceReaper
import java.sql.Connection
import java.sql.DriverManager
import java.util.*

class KotlinTest {
    companion object {
        var log: JooqLogger = JooqLogger.getLogger(KotlinTest::class.java)
        var db: PostgreSQLContainer<*>? = null
        var connection: Connection? = null
        var ctx: DSLContext? = null

        @BeforeClass
        @JvmStatic
        fun init() {
            if (System.getProperty("db.url") == null) {
                db = PostgreSQLContainer("postgres:latest")
                    .withUsername("postgres")
                    .withDatabaseName("postgres")
                    .withPassword("postgres")
                    .withInitScript("/db/migration/init.sql")
                db!!.start()
                System.setProperty("db.url", db!!.jdbcUrl)
                System.setProperty("db.username", db!!.username)
                System.setProperty("db.password", db!!.password)
            }

            val properties = Properties()
            properties.setProperty("username", "postgres")
            properties.setProperty("password", "postgres")
            log.info("Connecting")
            connection = DriverManager.getConnection(
                System.getProperty("db.url"),
                System.getProperty("db.username"),
                System.getProperty("db.password")
            )
            ctx = DSL.using(connection, SQLDialect.POSTGRES)
            connection!!.createStatement().use { s -> log.info("Finished setup") }
        }

        @AfterClass
        @JvmStatic
        fun end() {
            if (db != null) {
                ResourceReaper.instance().stopAndRemoveContainer(db!!.containerId, db!!.dockerImageName)
            }
        }
    }

    @Before
    fun setup() {
        ctx().delete(TEST).execute()
    }

    @After
    fun after() {}

    fun ctx(): DSLContext = ctx!!

    @Test
    fun mcveTest() {
        fun runExample() {
            val dslContext = ctx()
            runBlocking {
                try {
                    dslContext.transactionResult { _ ->
                        throw Exception("Test")
                    }
                } catch (e: Exception) {
                    println("first cause: ${e.cause}; second cause ${e.cause?.cause}")
                }
                try {
                    dslContext.transactionCoroutine { _ ->
                        throw Exception("Test")
                    }
                } catch (e: Exception) {
                    println("first cause: ${e.cause}; second cause ${e.cause?.cause}")
                }
            }
        }
        runExample()
    }
}
